# -*- coding: utf-8 -*-
"""backend_scraper

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZOnPx4o1sNiThSPpaCJ4trhoglvVScl0
"""

import threading
from bs4 import BeautifulSoup
import requests
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
import pandas as pd

def scrape_single_url(url):
    try:
        if "nairaland.com" in url:
            # Use requests for static pages
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            soup = BeautifulSoup(response.content, "html.parser")
            
            # Extract content
            title = soup.title.string if soup.title else "No Title"
            content = soup.get_text(separator="\n")[:1000]  # Limit content size
            
            return {
                "URL": url,
                "Title": title,
                "Content": content,
                "Timestamp": pd.Timestamp.now()
            }
        else:
            # Use Selenium for dynamic pages
            chrome_options = Options()
            chrome_options.add_argument("--headless")
            driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=chrome_options)
            driver.get(url)
            time.sleep(5)  # Wait for page to load
            soup = BeautifulSoup(driver.page_source, "html.parser")
            driver.quit()
            
            # Extract content
            title = soup.title.string if soup.title else "No Title"
            content = soup.get_text(separator="\n")[:1000]  # Limit content size
            
            return {
                "URL": url,
                "Title": title,
                "Content": content,
                "Timestamp": pd.Timestamp.now()
            }
    except Exception as e:
        print(f"Error scraping {url}: {str(e)}")
        return None

def scrape_urls(urls):
    scraped_data = []
    
    def worker(url):
        result = scrape_single_url(url)
        if result:
            scraped_data.append(result)
    
    threads = []
    for url in urls:
        thread = threading.Thread(target=worker, args=(url,))
        threads.append(thread)
        thread.start()
    
    for thread in threads:
        thread.join()
    
    return scraped_data
